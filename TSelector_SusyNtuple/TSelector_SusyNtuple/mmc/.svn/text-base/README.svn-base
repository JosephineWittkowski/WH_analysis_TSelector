Version 1.10
Runs roughly 0.1s (CPU time) per event on 64bit machine.
Inputs are expected in GeV.

How to get:
svn co svn+ssh://svn.cern.ch/reps/atlasusr/mflechl/code/htautau/mmc/tags/mmc-00-01-10

In a nutshell:
How to use the MMC class according to the recommendation:

  #include mmc.hpp						  // include the class 
  mmc MMC; 	        					  // init. at the beginning of the code
  double met_sigma=0.97*sqrt(met_sumet);			  // set resolution of missing energy (for 2011 data use met_sigma=0.7*sqrt(met_sumet);)
  MMC.Scan6dAnal(lep1, lep2, met_ex, met_ey, met_sigma);  	  // load variables in GEV
  met_ex = MMC.GetCorrMEX();				   	  // correct met_exi (output in GeV)
  met_ey = MMC.GetCorrMEY();				 	  // correct met_ey  (output in GeV)
  MMC.Scan4dAnal(lep1, lep2, met_ex, met_ey); 		 	  // load variables in GEV
  mass = MMC.GetPeak();					  	  // read the estimated mass

  * additional information may be found at:
  https://indico.cern.ch/getFile.py/access?contribId=3&resId=0&materialId=slides&confId=171256
  https://indico.cern.ch/getFile.py/access?contribId=3&resId=0&materialId=slides&confId=186968

More details:
1.
You only need mmc.cpp and mmc.hpp. Include them in your code as a shared library or compile it against your code.

2.
Initialise it:
mmc MMC;

[
This uses analytical theta3d weights. You can also use theta1d or deltaR weights by initialising like this:
mmc MMC(0); //theta, currently not supported!
mmc MMC(1); //deltaR
mmc MMC(3); //pure analyticly calculated weights (can use also mmc MMC for Scan6dAnal() and Scan6dTheta())
]

3.
Run it on an event like this (for diferent scans):
MMC.Scan6d(_v_leptons_reco[0], _v_leptons_reco[1], _MET_reco.Px(), _MET_reco.Py(), physics->MET_LocHadTopo_sumet/1000.); --- scan on [delPhi,m_miss]
MMC.Scan6dTheta(_v_leptons_reco[0], _v_leptons_reco[1], _MET_reco.Px(), _MET_reco.Py(), physics->MET_LocHadTopo_sumet/1000.); --- scan om [delPhi,delTheta]
MMC.Scan4dTheta(_v_leptons_reco[0], _v_leptons_reco[1], _MET_reco.Px(), _MET_reco.Py()); --- scan om [delPhi,delTheta] no MET scan
The leptons are TLorentzVectors, the MET components for x and y are float, and the sumEt is a float as well. *!!All units are GeV!!*

4.
Retrieve the outcome like this:
float m_peak=MMC.GetMZ_peak(); //recommended mass value
float m_mean=MMC.GetMZ_mean();
float m_maxp=MMC.GetMZ_maxprob();
If no solution has been found, the value -1 is returned.

if whant to get corrected MET value - can be corected using the MMC.Scan6dAnal(...), then use:
double Emiss_x = MMC.GetCorrMEX();
double Emiss_y = MMC.GetCorrMEY();

5.
You can specify a lot of options. They are listed here:
float exectime=MMC.GetExecTime(); //execution time of the last event in seconds

6.
You can test the mmc by using the macro provided:
<Start root>
root [0] .L mmc.cpp++
root [1] .x test_macro.C

You should get this output:
###############################################
MMC tag: mmc-00-01-10, 10/07/2012
Contact: martin.flechl@cern.ch
         michael.pitt@cern.ch
         ohad.silbert@cern.ch
         Julian.Maluck@physik.uni-freiburg.de
###############################################

Corr ex, ey = -1.36568 , -11.6097 solution = 107.5

Recommendation: to correct MET and estimate the mass with 4d scan

